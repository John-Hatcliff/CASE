package SW
public
	with Data_Model;
	with Base_Types;

	with CASE_Properties;
	with CASE_Model_Transformations;
	renames AGREE_PLTL::all;

	thread CASE_Monitor_Coord
		features
			observed: in event data port Mission;
			reference_1: in data port MapArray;
			alert: out event data port Base_Types::Boolean;
		properties
			CASE_Properties::Component_Type => MONITOR;
			CASE_Properties::Component_Spec => ("Req001_GeofenceMonitor");
		annex agree {**

			property CASE_Monitor_Coord_policy = Historically(event(observed) => WAYPOINTS_IN_KEEPIN_ZONE(observed, reference_1));

			const is_latched : bool = true;
			guarantee Req001_GeofenceMonitor "The monitor shall only output an alert when the monitor policy is true" : 
			  alert = not(CASE_Monitor_Coord_policy);
			  
            fun WAYPOINTS_IN_KEEPIN_ZONE(mission : Mission, keepInZone : MapArray) : bool =
              forall waypoint in mission, WAYPOINT_IN_KEEPIN_ZONE(waypoint, keepInZone);
              
            fun WAYPOINT_IN_KEEPIN_ZONE(waypoint : Coordinate.Impl, keepInZone: MapArray) : bool = 
              exists zone in keepInZone, WAYPOINT_IN_ZONE_POLYGON(waypoint, zone);
            
            -- Assumes rectangle that is defined by two corners so it is aligned
            -- with the origin (not rotated in space)
            -- Assumes that the altitude is the same in all the coordinates
            -- Assmes zone[0] is the bottom left corner and zone[2] in the upper right corner
            fun WAYPOINT_IN_ZONE_RECTANGLE(waypoint : Coordinate.Impl, zone : Map) : bool = 
                  (waypoint.latitude >= (zone[0]).latitude)
              and (waypoint.latitude <= (zone[2]).latitude)
              and (waypoint.longitude >= (zone[0]).longitude)
              and (waypoint.longitude <= (zone[2]).longitude)
              and (waypoint.altitude >= (zone[0]).altitude);
            
            -- see https://en.wikipedia.org/wiki/Even%E2%80%93odd_rule
            fun WAYPOINT_IN_ZONE_POLYGON(waypoint : Coordinate.Impl, zone : Map ) : bool =
              foldl i in indices(zone) into inZone = false, 
                inZone = if (point_crosses(waypoint, zone[i], zone[previous_index(i, 4)])) then not inZone else inZone;
            
            fun previous_index(i : int, size : int) : int = 
              if (i = 0) then size-1 else i - 1;
              
            fun point_crosses(waypoint : Coordinate.Impl, currentWaypoint : Coordinate.Impl, previousWaypoint : Coordinate.Impl) : bool =
                  (currentWaypoint.latitude > waypoint.latitude) != (previousWaypoint.latitude > waypoint.latitude)
              and (real(waypoint.longitude) < (real(currentWaypoint.longitude) + 
                                        (real(previousWaypoint.longitude) - real(currentWaypoint.longitude)) * 
                                        ((real(waypoint.latitude) - real(currentWaypoint.latitude)) / 
                                        (real(previousWaypoint.latitude) - real(currentWaypoint.latitude)))));
		**};
	end CASE_Monitor_Coord;

	thread implementation CASE_Monitor_Coord.Impl
		properties
			Dispatch_Protocol => Sporadic;
	end CASE_Monitor_Coord.Impl;
	
	
	thread CASE_Monitor_Req
		features
			observed: in event data port RF_Msg.Impl; -- mission command
			reference_1: in event data port Mission;  -- flight plan
			alert: out data port Base_Types::Boolean;
		properties
			CASE_Properties::Component_Type => MONITOR;
			CASE_Properties::Component_Spec => ("Req001_RequestMonitor");
		annex agree {**
			const is_latched : bool = true;  -- once alert becomes true, it stays true (unless the monitor is reset)
			-- Yesterday refers to the scheduling cycles regardless of the existence of events
			property CASE_Monitor_Req_policy = Historically(Yesterday(Yesterday(event(observed))) => event(reference_1));

			guarantee Req001_RequestMonitor "The monitor shall only output an alert when the monitor policy is true" : alert =
				if is_latched and prev(alert, not CASE_Monitor_Req_policy) then
					true
				else 
					not CASE_Monitor_Req_policy;					
		**};
	end CASE_Monitor_Req;

	thread implementation CASE_Monitor_Req.Impl
		properties
			Dispatch_Protocol => Sporadic;
	end CASE_Monitor_Req.Impl;
	

	thread CASE_Filter
		features
			filter_in: in event data port Mission;
			filter_out: out event data port Mission;
		properties
			CASE_Properties::Component_Type => FILTER;
			CASE_Properties::Component_Spec => ("Req002_Flight_Planner_Filter");
		annex agree {**
			guarantee Req002_FlightPlanner_Filter "The Flight Planner shall generate a valid mission" : good_mission(filter_out);
		**};
	end CASE_Filter;

	thread implementation CASE_Filter.Impl
		properties
			Dispatch_Protocol => Sporadic;
	end CASE_Filter.Impl;

	data Coordinate
	end Coordinate;

	data implementation Coordinate.Impl
		-- This is the structure to hold the lat/long/alt values of a coordinate
		subcomponents
			latitude: data Base_Types::Integer_32;
			longitude: data Base_Types::Integer_32;
			altitude: data Base_Types::Integer_32;
	end Coordinate.Impl;

	data Map
		-- The Map is a structure that contains a list of coordinates that encircle a
		-- region.  
		-- In this implementation, we fix the size of the map to 4 waypoints
		-- Waypoints ordered clockwise around polygon
		properties
			Data_Model::Data_Representation => Array;
			Data_Model::Base_Type => (classifier (Coordinate.Impl));
			Data_Model::Dimension => (4);
	end Map;

	data MapArray
		-- The MapArray is a structure that hold multiple Maps
		-- In this implementation, we fix the size of the map array to 5 maps
		-- Future versions will use an array
		properties
			Data_Model::Data_Representation => Array;
			Data_Model::Base_Type => (classifier (Map));
			Data_Model::Dimension => (5);
	end MapArray;

	data FlightPattern
		-- The Flight Pattern is an enumeration that defines how the UAV will fly through the
		-- sensing region to conduct surveillance.
		properties
			Data_Model::Data_Representation => Enum;
			Data_Model::Enumerators => ("ZigZag", "StraightLine", "Perimeter");
	end FlightPattern;

	data implementation FlightPattern.Impl
	end FlightPattern.Impl;

	data Command
	end Command;

	data implementation Command.Impl
		-- The Command structure contains data that the Ground Station passes to the UAV.
		-- It contains a message header, Map and Flight Pattern.
		subcomponents
			map: data Map;
			pattern: data FlightPattern;
	end Command.Impl;

	data RF_Msg extends CASE_Model_Transformations::CASE_RF_Msg
	end RF_Msg;

	data implementation RF_Msg.Impl extends CASE_Model_Transformations::CASE_RF_Msg.Impl
		subcomponents
			payload: refined to data Command.Impl;
	end RF_Msg.Impl;

	data Mission
		-- The Mission is a list of waypoints that is generated by the Flight Planner based on a
		-- Map and Flight Pattern.
		-- For this implementation, we fix the size of the Mission to 10 waypoints.
		-- Future versions will use an array
		properties
			Data_Model::Data_Representation => Array;
			Data_Model::Base_Type => (classifier (Coordinate.Impl));
			Data_Model::Dimension => (10);
	end Mission;

	data MissionWindow
		-- The Mission Window is a list of waypoints that the Waypoint Manager assembles from the Mission.
		-- For this implementation, we fix the size of the Mission Window to 4 waypoints.
		properties
			Data_Model::Data_Representation => Array;
			Data_Model::Base_Type => (classifier (Coordinate.Impl));
			Data_Model::Dimension => (4);
	end MissionWindow;

	thread RadioDriver
		-- The RadioDriver is the software that enables other SW components to communicate to other systems over RF
		features
			recv_data: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			send_data: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			mission_command: out event data port RF_Msg.Impl;
			status: in event data port Coordinate.Impl;
			alert: in event data port Base_Types::Boolean;
		properties
			CASE_Properties::Component_Type => COMM_DRIVER;
		annex agree {**
			guarantee Req001_RadioDriver "Only valid command messages shall be forwarded to message destination components" : VALID_MESSAGE(mission_command);
		**};
	end RadioDriver;

	thread implementation RadioDriver.Impl
		properties
			Dispatch_Protocol => Sporadic;
	end RadioDriver.Impl;

	thread FlightPlanner
		-- The FlightPlanner is an abstraction for UxAS.
		-- It accepts a command message containing a map and flight pattern, and generates a mission.
		-- The FlightPlanner also has access to a No-Fly zone database, which it uses to generate the mission 
		-- to avoid specified no-fly zones
		features
			flight_plan: out event data port Mission;
			recv_map: in event data port RF_Msg.Impl;
			keep_in_zones: in data port MapArray;
			keep_out_zones: in data port MapArray;
		properties
			CASE_Properties::BOUNDARY => (UNCONTROLLED);
		annex agree {**
			assume Req001_FlightPlanner "The Flight Planner shall receive a valid message from the Ground Station" : VALID_MESSAGE(recv_map);
			guarantee Req002_FlightPlanner "The Flight Planner shall generate a valid mission" : good_mission(flight_plan);
		**};
	end FlightPlanner;

	thread implementation FlightPlanner.Impl
		properties
			Dispatch_Protocol => Sporadic;
	end FlightPlanner.Impl;

	thread FlyZonesDatabase
		-- The NoFlyZoneDatabase is a collection of polygons that represent areas on a map which the UAV should avoid.
		-- The database is populated at build-time and stored in memory.
		features
			keep_in_zones: out data port MapArray;
			keep_out_zones: out data port MapArray;
	end FlyZonesDatabase;

	thread implementation FlyZonesDatabase.Impl
		properties
			Dispatch_Protocol => Sporadic;
	end FlyZonesDatabase.Impl;

	thread WaypointManager
		-- The WaypointManager divides a mission into a small window of waypoints suitable for the FlightController.
		-- Because the FlightController can only process a small number of waypoints at a time, the WaypointManager
		-- creates these mission windows in response to the current position of the UAV, provided by the FlightController GPS.
		features
			flight_plan: in event data port Mission;
			mission_window: out event data port MissionWindow;
			position_status: in event data port Coordinate.Impl;
			return_home: in event data port Base_Types::Boolean;
		annex agree {**
			assume Req001_WaypointManager "The Waypoint Manager shall receive a well-formed mission" : good_mission(flight_plan);
			guarantee Req002_WaypointManager "The Waypoint Manager shall output a well-formed mission window" : good_mission_window(mission_window);
		**};
	end WaypointManager;

	thread implementation WaypointManager.Impl
		properties
			Dispatch_Protocol => Sporadic;
	end WaypointManager.Impl;

	thread UARTDriver
		-- The UARTDriver is the software that enables other SW components to communicate to other systems over the serial connection
		features
			status: out event data port Coordinate.Impl;
			mission_window: in event data port MissionWindow;
			recv_data: in event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
			send_data: out event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
		annex agree {**
			assume Req001_UARTDriver "Well-formed mission window" : good_mission_window(mission_window);
			guarantee Req002_UARTDriver "A CRC shall be appended to the message to determine message correctness" : send_data.crc;
		**};
	end UARTDriver;

	thread implementation UARTDriver.Impl
		properties
			Dispatch_Protocol => Sporadic;
	end UARTDriver.Impl;

	process SW
		-- The Mission Computer Software process runs all threads
		features
			radio_recv: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			radio_send: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			uart_recv: in event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
			uart_send: out event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
		annex agree {**
			guarantee Req001_SW "The Mission Computer shall output a valid mission window to the Flight Controller" : uart_send.crc;
		**};
	end SW;

	-- This is the original SW 
	process implementation SW.Original
		subcomponents
			Radio: thread RadioDriver.Impl;
			UxAS: thread FlightPlanner.Impl;
			WaypointManager: thread WaypointManager.Impl;
			UART: thread UARTDriver.Impl;
			FlyZones: thread FlyZonesDatabase.Impl;
		connections
			c1: port radio_recv -> Radio.recv_data;
			c2: port Radio.send_data -> radio_send;
			c3: port Radio.mission_command -> UxAS.recv_map;
			c4: port UxAS.flight_plan -> WaypointManager.flight_plan;
			c5: port FlyZones.keep_in_zones -> UxAS.keep_in_zones;
			c6: port FlyZones.keep_in_zones -> UxAS.keep_in_zones;
			c7: port WaypointManager.mission_window -> UART.mission_window;
			c8: port UART.status -> WaypointManager.position_status;
			c9: port UART.status -> Radio.status;
			c10: port UART.send_data -> uart_send;
			c11: port uart_recv -> UART.recv_data;
	end SW.Original;

	-- This software implementation includes both monitors
	-- It also includes a filter to check that flight
	-- plans are well-formed
	process implementation SW.Transformed
		subcomponents
			Radio: thread RadioDriver.Impl;
			UxAS: thread FlightPlanner.Impl;
			WaypointManager: thread WaypointManager.Impl;
			UART: thread UARTDriver.Impl;
			FlyZones: thread FlyZonesDatabase.Impl;
			ResponseFilter: thread CASE_Filter.Impl;
			GeofenceMonitor: thread CASE_Monitor_Coord.Impl;
			RequestMonitor: thread CASE_Monitor_Req.Impl;
		connections
			c1: port radio_recv -> Radio.recv_data;
			c2: port Radio.send_data -> radio_send;
			c3: port Radio.mission_command -> UxAS.recv_map;
			c4: port FlyZones.keep_in_zones -> UxAS.keep_in_zones;
			c5: port FlyZones.keep_out_zones -> UxAS.keep_out_zones;
			c6: port Radio.mission_command -> RequestMonitor.observed;
			c7: port UxAS.flight_plan -> RequestMonitor.reference_1;
			c8: port RequestMonitor.alert -> Radio.alert;
--			c9: port RequestMonitor.output -> ResponseFilter.filter_in;
--			c10: port ResponseFilter.filter_out -> GeofenceMonitor.observed;
			c11: port FlyZones.keep_in_zones -> GeofenceMonitor.reference_1;
			c12: port UxAS.flight_plan -> GeofenceMonitor.observed;
			c13: port UxAS.flight_plan -> WaypointManager.flight_plan;
			c14: port GeofenceMonitor.alert -> WaypointManager.return_home;
			c15: port WaypointManager.mission_window -> UART.mission_window;
			c16: port UART.status -> WaypointManager.position_status;
			c17: port UART.status -> Radio.status;
			c18: port UART.send_data -> uart_send;
			c19: port uart_recv -> UART.recv_data;
		annex resolute {**
			prove Req005_WaypointManager(this.WaypointManager, this.ResponseFilter, this.c13, Mission)
			prove Req004_FlightPlanner(this.UxAS, this.GeofenceMonitor)
			prove Req003_FlightPlanner(this.UxAS, this.RequestMonitor)
		**};
	end SW.Transformed;


	annex agree {**
		-- ID of this UAV
		const CASE_UAV_ID : int = 42;
		fun VALID_MESSAGE(msg : RF_Msg.Impl) : bool = (msg.header.src > 0 and msg.header.dst = CASE_UAV_ID and msg.header.HMAC);
		fun WELL_FORMED_MESSAGE(msg : RF_Msg.Impl) : bool = good_command(msg.payload);
		-- These functions check the well-formedness of message structures
		fun good_coordinate(coord : Coordinate.Impl) : bool = coord.latitude >= -90 and coord.latitude <= 90 and coord.longitude >= -180 and coord.longitude <= 180 and coord.altitude >= 0 and coord.altitude <= 15000;
		fun good_map(map : Map) : bool = forall wp in map, good_coordinate(wp);
		fun good_pattern(pattern : FlightPattern) : bool = (pattern = enum(FlightPattern, ZigZag)) or (pattern = enum(FlightPattern, StraightLine)) or (pattern = enum(FlightPattern, Perimeter));
		fun good_command(cmd : Command.Impl) : bool = good_map(cmd.map) and good_pattern(cmd.pattern);
		fun good_mission(mission : Mission) : bool = forall wp in mission, good_coordinate(wp);
		fun good_mission_window(win : MissionWindow) : bool = forall wp in win, good_coordinate(wp);
	**};

end SW;