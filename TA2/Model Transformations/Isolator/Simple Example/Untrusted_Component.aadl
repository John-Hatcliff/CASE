package Untrusted_Component
public
	
	with CASE_Properties;
	
	processor HW_Proc
		properties
			CASE_Properties::OS => "sel4";
	end HW_Proc;
	
	processor implementation HW_Proc.Impl
	end HW_Proc.Impl;
	
	process SW
	end SW;
	
	process implementation SW.Impl
		subcomponents
			A: thread Comp_A.Impl;
			B: thread Comp_B.Impl;
			C: thread Comp_C.Impl;
		connections
			c1: port A.output -> B.input;
			c2: port B.output -> C.input;
	end SW.Impl;
	
	thread Comp_A
		features
			output: out event data port;
	end Comp_A;
	
	thread implementation Comp_A.Impl
	end Comp_A.Impl;
	
	thread Comp_B
		features
			input: in event data port;
			output: out event data port;
	end Comp_B;
	
	thread implementation Comp_B.Impl
	end Comp_B.Impl;
	
	thread Comp_C
		features
			input: in event data port;
	end Comp_C;
	
	thread implementation Comp_C.Impl
	end Comp_C.Impl;
	
	system Critical
	end Critical;
	
	system implementation Critical.Impl
		subcomponents
			PROC : processor HW_Proc.Impl;
			SW : process SW.Impl;
		properties
			Actual_Processor_Binding => (reference (PROC)) applies to SW;
		annex resolute {**
			prove(Req_Isolated(this.SW))
		**};
	end Critical.Impl;
	
private
	
	annex resolute {**
		Req_Isolated(comp_context : component) <=
			** "Third-party software shall be isolated from critical components" **
			false
	**};
	
end Untrusted_Component;