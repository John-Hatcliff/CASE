package No_Attestation
public
	with CASE_Model_Transformations;

	with CASE_Properties;

	with Base_Types;

	thread RadioDriver
		features
			command_message: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			other_message: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
		properties
			CASE_Properties::COMP_TYPE => COMM_DRIVER;
	end RadioDriver;

	thread implementation RadioDriver.Impl
	end RadioDriver.Impl;

	thread Critical_A
		features
			recv_command: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			status: out event data port Base_types::Boolean;
		annex agree {**
			assume Req_Trusted "Command messages shall only come from trusted sources" : recv_command.header.trusted;
			guarantee "Critical component status shall never be false" : status;
		**};
	end Critical_A;

	thread implementation Critical_A.Impl
	end Critical_A.Impl;
	
	thread Critical_B
		features
			recv_message: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
	end Critical_B;

	thread implementation Critical_B.Impl
	end Critical_B.Impl;

	process SW
		features
			output: out event data port Base_Types::Boolean;
		annex agree {**
			guarantee "Output status shall never be false" : output;
		**};
	end SW;

	process implementation SW.Impl
		subcomponents
			RADIO: thread RadioDriver.Impl;
			CRIT_A: thread Critical_A.Impl;
			CRIT_B: thread Critical_B.Impl;
		connections
			c1: port RADIO.command_message -> CRIT_A.recv_command;
			c2: port RADIO.other_message -> CRIT_B.recv_message;
			c3: port CRIT_A.status -> output;
		annex resolute {**
			prove(Req_Trusted(this.CRIT_A, "Req_Trusted"))
		**};
	end SW.Impl;
	
private
	
	annex resolute {**
		Req_Trusted(comp_context : component, property_id : string) <=
			** "Command messages shall only come from trusted sources" **
			agree_prop_checked(comp_context, property_id)
	**};
	
end No_Attestation;