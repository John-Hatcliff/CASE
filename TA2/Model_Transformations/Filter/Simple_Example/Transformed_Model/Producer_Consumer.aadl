package Producer_Consumer
public
	with Base_Types;

	with CASE_Properties;

	with CASE_Model_Transformations;

	thread CASE_Filter
		features
			filter_in: in event data port Coordinate.Impl;
			filter_out: out event data port Coordinate.Impl;
		properties
			CASE_Properties::COMP_TYPE => FILTER;
			CASE_Properties::COMP_SPEC => ("Req_Filter_LatLong", "Req_Filter_Alt");
		annex agree {**
			guarantee Req_Filter_LatLong "The Consumer shall only receive well-formed lat-long values" : WELL_FORMED_LAT_LONG(filter_out);
			guarantee Req_Filter_Alt "The Consumer shall only receive well-formed altitude values" : WELL_FORMED_ALT(filter_out);
		**};
	end CASE_Filter;

	thread implementation CASE_Filter.Impl
		properties
			Dispatch_Protocol => Sporadic;
	end CASE_Filter.Impl;

	data Coordinate
	end Coordinate;

	data implementation Coordinate.Impl
		-- This is the structure to hold the lat/long/alt values of a coordinate
		subcomponents
			latitude: data Base_Types::Integer;
			longitude: data Base_Types::Integer;
			altitude: data Base_Types::Integer;
	end Coordinate.Impl;

	thread Producer
		features
			trigger: in event data port Base_Types::Integer;
			msg_out: out event data port Coordinate.Impl;
	end Producer;

	thread implementation Producer.Impl
		properties
			Dispatch_Protocol => Sporadic;
	end Producer.Impl;

	thread Consumer
		features
			msg_in: in event data port Coordinate.Impl;
			status: out event data port Base_types::Boolean;
		annex agree {**
			-- This is the formalized version of the well-formed requirement from the TA1 tool
			assume Req_Wellformed_LatLong "The Consumer shall only receive well-formed lat-long values" : WELL_FORMED_LAT_LONG(msg_in);
			assume Req_Wellformed_Alt "The Consumer shall only receive well-formed alt values" : WELL_FORMED_ALT(msg_in);
			guarantee "Consumer status shall never be false" : status;
		**};
	end Consumer;

	thread implementation Consumer.Impl
		properties
			Dispatch_Protocol => Sporadic;
	end Consumer.Impl;

	process SW
		features
			input: in event data port Base_Types::Integer;
			output: out event data port Base_Types::Boolean;
		annex agree {**
			guarantee "Consumer status is never false" : output;
		**};
	end SW;

	process implementation SW.Impl
		subcomponents
			Producer: thread Producer.Impl;
			Consumer: thread Consumer.Impl;
			FLT: thread CASE_Filter.Impl;
		connections
			c0: port input -> Producer.trigger;
			c1: port Producer.msg_out -> FLT.filter_in;
			c3: port FLT.filter_out -> Consumer.msg_in;
			c2: port Consumer.status -> output;
		annex resolute {**
			prove Req_Wellformed_LatLong(this.Consumer, "Req_Wellformed_LatLong", this.FLT, this.c3, Coordinate.Impl)
			prove Req_Wellformed_Alt(this.Consumer, "Req_Wellformed_Alt", this.FLT, this.c3, Coordinate.Impl)
		**};
	end SW.Impl;

	system Sys
		features
			input: in event data port Base_Types::Integer;
			output: out event data port Base_Types::Boolean;
	end Sys;

	system implementation Sys.Impl
		subcomponents
			SW: process SW.Impl;
		connections
			c1: port input -> SW.input;
			c2: port SW.output -> output;
	end Sys.Impl;

	annex agree {**
		-- This is the filter spec
		fun WELL_FORMED_LAT_LONG(coord : Coordinate.Impl) : bool = coord.latitude >= -90 and coord.latitude <= 90 and coord.longitude >= -180 and coord.longitude <= 180;
		fun WELL_FORMED_ALT(coord : Coordinate.Impl) : bool = coord.altitude >= 0 and coord.altitude <= 15000;
	**};
	
end Producer_Consumer;