package SW
public
	with Data_Model;

	with Base_Types;

	with CASE_Properties;

	with CASE_Model_Transformations;

	data Coordinate
	end Coordinate;

	data implementation Coordinate.Impl
		-- This is the structure to hold the lat/long/alt values of a coordinate
		subcomponents
			latitude: data Base_Types::Integer;
			longitude: data Base_Types::Integer;
			altitude: data Base_Types::Integer;
	end Coordinate.Impl;

	data Map
		-- The Map is a structure that contains a list of coordinates that encircle a
		-- region.  
		-- In this implementation, we fix the size of the map to 4 waypoints
		properties
			Data_Model::Data_Representation => Array;
			Data_Model::Base_Type => (classifier (Coordinate.Impl));
			Data_Model::Dimension => (4);
	end Map;

	data MapArray
		-- The MapArray is a structure that hold multiple Maps
		-- In this implementation, we fix the size of the map array to 5 maps
		-- Future versions will use an array
		properties
			Data_Model::Data_Representation => Array;
			Data_Model::Base_Type => (classifier (Map));
			Data_Model::Dimension => (5);
	end MapArray;

	data FlightPattern
		-- The Flight Pattern is an enumeration that defines how the UAV will fly through the
		-- sensing region to conduct surveillance.
		properties
			Data_Model::Data_Representation => Enum;
			Data_Model::Enumerators => ("ZigZag", "StraightLine", "Perimeter");
	end FlightPattern;

	data implementation FlightPattern.Impl
	end FlightPattern.Impl;

	data Command
	end Command;

	data implementation Command.Impl
		-- The Command structure contains data that the Ground Station passes to the UAV.
		-- It contains a message header, Map and Flight Pattern.
		subcomponents
			map: data Map;
			pattern: data FlightPattern;
	end Command.Impl;

	data RF_Msg extends CASE_Model_Transformations::CASE_RF_Msg
	end RF_Msg;

	data implementation RF_Msg.Impl extends CASE_Model_Transformations::CASE_RF_Msg.Impl
		subcomponents
			payload: refined to data Command.Impl;
	end RF_Msg.Impl;

	data Mission
		-- The Mission is a list of waypoints that is generated by the Flight Planner based on a
		-- Map and Flight Pattern.
		-- For this implementation, we fix the size of the Mission to 10 waypoints.
		-- Future versions will use an array
		properties
			Data_Model::Data_Representation => Array;
			Data_Model::Base_Type => (classifier (Coordinate.Impl));
			Data_Model::Dimension => (10);
	end Mission;

	data MissionWindow
		-- The Mission Window is a list of waypoints that the Waypoint Manager assembles from the Mission.
		-- For this implementation, we fix the size of the Mission Window to 4 waypoints.
		properties
			Data_Model::Data_Representation => Array;
			Data_Model::Base_Type => (classifier (Coordinate.Impl));
			Data_Model::Dimension => (4);
	end MissionWindow;

	thread WifiDriver
		-- The WifiDriver is the software that enables other SW components to communicate to other systems over WiFi
		features
			gimbal_command: in event data port;
			send_data: out event data port CASE_Model_Transformations::CASE_WIFI_Msg.Impl;
			recv_data: in event data port CASE_Model_Transformations::CASE_WIFI_Msg.Impl;
	end WifiDriver;

	thread implementation WifiDriver.Impl
	end WifiDriver.Impl;
	
	process WifiDriver_Proc
		features
			gimbal_command: in event data port;
			send_data: out event data port CASE_Model_Transformations::CASE_WIFI_Msg.Impl;
			recv_data: in event data port CASE_Model_Transformations::CASE_WIFI_Msg.Impl;
	end WifiDriver_Proc;
	
	process implementation WifiDriver_Proc.Impl
		subcomponents
			WifiDriver: thread WifiDriver.Impl;
		connections
			c1: port gimbal_command -> WifiDriver.gimbal_command;
			c2: port WifiDriver.send_data -> send_data;
			c3: port recv_data -> WifiDriver.recv_data;
	end WifiDriver_Proc.Impl;

	thread RadioDriver
		-- The RadioDriver is the software that enables other SW components to communicate to other systems over RF
		features
			recv_data: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			send_data: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			mission_command: out event data port RF_Msg.Impl;
			status: in event data port Coordinate.Impl;
		properties
			CASE_Properties::COMP_TYPE => COMM_DRIVER;
		annex agree {**
			guarantee Req001_RadioDriver "Only valid command messages shall be forwarded to message destination components" : VALID_MESSAGE(mission_command);
		**};
	end RadioDriver;

	thread implementation RadioDriver.Impl
	end RadioDriver.Impl;
	
	process RadioDriver_Proc
		features
			recv_data: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			send_data: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			mission_command: out event data port RF_Msg.Impl;
			status: in event data port Coordinate.Impl;
		properties
			CASE_Properties::COMP_TYPE => COMM_DRIVER;
--			CASE_Properties::COMP_TYPE => SEL4;
	end RadioDriver_Proc;
	
	process implementation RadioDriver_Proc.Impl
		subcomponents
			RadioDriver: thread RadioDriver.Impl;
		connections
			c1: port recv_data -> RadioDriver.recv_data;
			c2: port RadioDriver.send_data -> send_data;
			c3: port RadioDriver.mission_command -> mission_command;
			c4: port status -> RadioDriver.status;
	end RadioDriver_Proc.Impl;

	thread FlightPlanner
		-- The FlightPlanner is an abstraction for UxAS.
		-- It accepts a command message containing a map and flight pattern, and generates a mission.
		-- The FlightPlanner also has access to a No-Fly zone database, which it uses to generate the mission 
		-- to avoid specified no-fly zones
		features
			flight_plan: out data port Mission;
			recv_map: in event data port RF_Msg.Impl;
			request_nofly_zones: out event data port Map;
			nofly_zones: in event data port MapArray;
			position_status: in event data port Coordinate.Impl;
		annex agree {**
			assume Req001_FlightPlanner "The Flight Planner shall receive a valid message from the Ground Station" : VALID_MESSAGE(recv_map);
			guarantee Req002_FlightPlanner "The Flight Planner shall generate a valid mission" : good_mission(flight_plan);
		**};
	end FlightPlanner;

	thread implementation FlightPlanner.Impl
	end FlightPlanner.Impl;
	
	process FlightPlanner_Proc
		features
			flight_plan: out data port Mission;
			recv_map: in event data port RF_Msg.Impl;
			request_nofly_zones: out event data port Map;
			nofly_zones: in event data port MapArray;
			position_status: in event data port Coordinate.Impl;
		properties
			CASE_Properties::COMP_TYPE => SEL4;
	end FlightPlanner_Proc;
	
	process implementation FlightPlanner_Proc.Impl
		subcomponents
			FlightPlanner: thread FlightPlanner.Impl;
		connections
			c1: port FlightPlanner.flight_plan -> flight_plan;
			c2: port recv_map -> FlightPlanner.recv_map;
			c3: port FlightPlanner.request_nofly_zones -> request_nofly_zones;
			c4: port nofly_zones -> FlightPlanner.nofly_zones;
			c5: port position_status -> FlightPlanner.position_status;
	end FlightPlanner_Proc.Impl;

	thread NoFlyZoneDatabase
		-- The NoFlyZoneDatabase is a collection of polygons that represent areas on a map which the UAV should avoid.
		-- The database is populated at build-time and stored in memory.
		-- When provided a map of a region, it will return all no-fly areas within that region.
		features
			map: in event data port Map;
			zones: out event data port MapArray;
	end NoFlyZoneDatabase;

	thread implementation NoFlyZoneDatabase.Impl
	end NoFlyZoneDatabase.Impl;
	
	process NoFlyZoneDatabase_Proc
		features
			map: in event data port Map;
			zones: out event data port MapArray;
		properties
			CASE_Properties::COMP_TYPE => SEL4;
	end NoFlyZoneDatabase_Proc;
	
	process implementation NoFlyZoneDatabase_Proc.Impl
		subcomponents
			NoFlyZoneDatabase: thread NoFlyZoneDatabase.Impl;
		connections
			c1: port map -> NoFlyZoneDatabase.map;
			c2: port NoFlyZoneDatabase.zones -> zones;
	end NoFlyZoneDatabase_Proc.Impl;

	thread WaypointManager
		-- The WaypointManager divides a mission into a small window of waypoints suitable for the FlightController.
		-- Because the FlightController can only process a small number of waypoints at a time, the WaypointManager
		-- creates these mission windows in response to the current position of the UAV, provided by the FlightController GPS.
		features
			flight_plan: in data port Mission;
			mission_window: out event data port MissionWindow;
			position_status: in event data port Coordinate.Impl;
		annex agree {**
			assume Req001_WaypointManager "The Waypoint Manager shall receive a well-formed mission" : good_mission(flight_plan);
			guarantee Req002_WaypointManager "The Waypoint Manager shall output a well-formed mission window" : good_mission_window(mission_window);
		**};
	end WaypointManager;

	thread implementation WaypointManager.Impl
	end WaypointManager.Impl;
	
	process WaypointManager_Proc
		features
			flight_plan: in data port Mission;
			mission_window: out event data port MissionWindow;
			position_status: in event data port Coordinate.Impl;
		properties
			CASE_Properties::COMP_TYPE => SEL4;
	end WaypointManager_Proc;
	
	process implementation WaypointManager_Proc.Impl
		subcomponents
			WaypointManager: thread WaypointManager.Impl;
		connections
			c1: port flight_plan -> WaypointManager.flight_plan;
			c2: port WaypointManager.mission_window -> mission_window;
			c3: port position_status -> WaypointManager.position_status;
	end WaypointManager_Proc.Impl;
	
	thread group UxAS
		features
			flight_plan: out data port Mission;
			recv_map: in event data port RF_Msg.Impl;
			position_status: in event data port Coordinate.Impl;
			mission_window: out event data port MissionWindow;
	end UxAS;
	
	thread group implementation UxAS.Impl
		subcomponents
			FPLN: thread FlightPlanner.Impl;
			NFDB: thread NoFlyZoneDatabase.Impl;
			WPM: thread WaypointManager.Impl;
		connections
			c1: port recv_map -> FPLN.recv_map;
			c2: port FPLN.flight_plan -> WPM.flight_plan;
			c3: port FPLN.request_nofly_zones -> NFDB.map;
			c4: port NFDB.zones -> FPLN.nofly_zones;
			c5: port WPM.mission_window -> mission_window;
			c6: port position_status -> FPLN.position_status;
			c7: port position_status -> WPM.position_status;
			c8: port FPLN.flight_plan -> flight_plan;
	end UxAS.Impl;
	
	system UxAS_Sys
		features
			flight_plan: out data port Mission;
			recv_map: in event data port RF_Msg.Impl;
			position_status: in event data port Coordinate.Impl;
			mission_window: out event data port MissionWindow;
	end UxAS_Sys;
	
	system implementation UxAS_Sys.Impl
		subcomponents
			FPLN: process FlightPlanner_Proc.Impl;
			NFDB: process NoFlyZoneDatabase_Proc.Impl;
			WPM: process WaypointManager_Proc.Impl;
		connections
			c1: port recv_map -> FPLN.recv_map;
			c2: port FPLN.flight_plan -> WPM.flight_plan;
			c3: port FPLN.request_nofly_zones -> NFDB.map;
			c4: port NFDB.zones -> FPLN.nofly_zones;
			c5: port WPM.mission_window -> mission_window;
			c6: port position_status -> FPLN.position_status;
			c7: port position_status -> WPM.position_status;
			c8: port FPLN.flight_plan -> flight_plan;
	end UxAS_Sys.Impl;

	thread CameraManager
		-- The CameraManager determines the gimbal settings for the onboard camera based on the current position of the UAV and the mission.
		-- The CameraManager then sends out gimbal commands to the camera over the wifi connection
		features
			flight_plan: in data port Mission;
			position_status: in event data port Coordinate.Impl;
			gimbal_command: out event data port;
	end CameraManager;

	thread implementation CameraManager.Impl
	end CameraManager.Impl;
	
	process CameraManager_Proc
		features
			flight_plan: in data port Mission;
			position_status: in event data port Coordinate.Impl;
			gimbal_command: out event data port;
		properties
			CASE_Properties::COMP_TYPE => SEL4;
	end CameraManager_Proc;
	
	process implementation CameraManager_Proc.Impl
		subcomponents
			CameraManager: thread CameraManager.Impl;
		connections
			c1: port flight_plan -> CameraManager.flight_plan;
			c2: port position_status -> CameraManager.position_status;
			c3: port CameraManager.gimbal_command -> gimbal_command;
	end CameraManager_Proc.Impl;

	thread UARTDriver
		-- The UARTDriver is the software that enables other SW components to communicate to other systems over the serial connection
		features
			status: out event data port Coordinate.Impl;
			mission_window: in event data port MissionWindow;
			recv_data: in event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
			send_data: out event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
		annex agree {**
			assume Req001_UARTDriver "Well-formed mission window" : good_mission_window(mission_window);
			guarantee Req002_UARTDriver "A CRC shall be appended to the message to determine message correctness" : send_data.crc;
		**};
	end UARTDriver;

	thread implementation UARTDriver.Impl
	end UARTDriver.Impl;
	
	process UARTDriver_Proc
		features
			status: out event data port Coordinate.Impl;
			mission_window: in event data port MissionWindow;
			recv_data: in event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
			send_data: out event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
		properties
			CASE_Properties::COMP_TYPE => SEL4;
	end UARTDriver_Proc;
	
	process implementation UARTDriver_Proc.Impl
		subcomponents
			UARTDriver: thread UARTDriver.Impl;
		connections
			c1: port UARTDriver.status -> status;
			c2: port mission_window -> UARTDriver.mission_window;
			c3: port recv_data -> UARTDriver.recv_data;
			c4: port UARTDriver.send_data -> send_data;
	end UARTDriver_Proc.Impl;

	process SW
		-- The Mission Computer Software process runs all threads
		features
			radio_recv: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			radio_send: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			uart_recv: in event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
			uart_send: out event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
			wifi_recv: in event data port CASE_Model_Transformations::CASE_WIFI_Msg.Impl;
			wifi_send: out event data port CASE_Model_Transformations::CASE_WIFI_Msg.Impl;
		annex agree {**
			guarantee Req001_SW "The Mission Computer shall output a valid mission window to the Flight Controller" : uart_send.crc;
		**};
	end SW;

	process implementation SW.Impl
		subcomponents
			RADIO: thread RadioDriver.Impl;
			CM: thread CameraManager.Impl;
			UART: thread UARTDriver.Impl;
			WIFI: thread WifiDriver.Impl;
			UXAS: thread group UxAS.Impl;
		connections
			c1: port radio_recv -> RADIO.recv_data;
			c2: port RADIO.send_data -> radio_send;
			c3: port RADIO.mission_command -> UXAS.recv_map;
			c4: port UXAS.mission_window -> UART.mission_window;
			c5: port UART.status -> UXAS.position_status;
			c6: port UART.status -> RADIO.status;
			c7: port UART.send_data -> uart_send;
			c8: port uart_recv -> UART.recv_data;
			c9: port UXAS.flight_plan -> CM.flight_plan;
			c10: port UART.status -> CM.position_status;
			c11: port CM.gimbal_command -> WIFI.gimbal_command;
			c12: port WIFI.send_data -> wifi_send;
			c13: port wifi_recv -> WIFI.recv_data;
	end SW.Impl;
	
	system SW_Sys
		features
			radio_recv: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			radio_send: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			uart_recv: in event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
			uart_send: out event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
			wifi_recv: in event data port CASE_Model_Transformations::CASE_WIFI_Msg.Impl;
			wifi_send: out event data port CASE_Model_Transformations::CASE_WIFI_Msg.Impl;
	end SW_Sys;
	
	system implementation SW_Sys.Impl
		subcomponents
			RADIO: process RadioDriver_Proc.Impl;
			CM: process CameraManager_Proc.Impl;
			UART: process UARTDriver_Proc.Impl;
			WIFI: process WifiDriver_Proc.Impl;
			UXAS: system UxAS_Sys.Impl;
		connections
			c1: port radio_recv -> RADIO.recv_data;
			c2: port RADIO.send_data -> radio_send;
			c3: port RADIO.mission_command -> UXAS.recv_map;
			c4: port UXAS.mission_window -> UART.mission_window;
			c5: port UART.status -> UXAS.position_status;
			c6: port UART.status -> RADIO.status;
			c7: port UART.send_data -> uart_send;
			c8: port uart_recv -> UART.recv_data;
			c9: port UXAS.flight_plan -> CM.flight_plan;
			c10: port UART.status -> CM.position_status;
			c11: port CM.gimbal_command -> WIFI.gimbal_command;
			c12: port WIFI.send_data -> wifi_send;
			c13: port wifi_recv -> WIFI.recv_data;
	end SW_Sys.Impl;

	annex agree {**
		-- ID of this UAV
		const CASE_UAV_ID : int = 42;
		fun VALID_MESSAGE(msg : RF_Msg.Impl) : bool = (msg.header.src > 0 and msg.header.dst = CASE_UAV_ID and msg.header.HMAC);
		fun TRUSTED_MESSAGE(msg : RF_Msg.Impl) : bool = msg.header.trusted;
		fun WELL_FORMED_MESSAGE(msg : RF_Msg.Impl) : bool = good_command(msg.payload);
		-- These functions check the well-formedness of message structures
		fun good_coordinate(coord : Coordinate.Impl) : bool = coord.latitude >= -90 and coord.latitude <= 90 and coord.longitude >= -180 and coord.longitude <= 180 and coord.altitude >= 0 and coord.altitude <= 15000;
		fun good_map(map : Map) : bool = forall wp in map, good_coordinate(wp);
		fun good_pattern(pattern : FlightPattern) : bool = (pattern = enum(FlightPattern, ZigZag)) or (pattern = enum(FlightPattern, StraightLine)) or (pattern = enum(FlightPattern, Perimeter));
		fun good_command(cmd : Command.Impl) : bool = good_map(cmd.map) and good_pattern(cmd.pattern);
		fun good_mission(mission : Mission) : bool = forall wp in mission, good_coordinate(wp);
		fun good_mission_window(win : MissionWindow) : bool = forall wp in win, good_coordinate(wp);
	**};

end SW;