package Monitor
public
	with CASE_Model_Transformations;

	with CASE_Properties;

	with Base_Types;

	thread RadioDriver
		features
			recv_message: in event data port;
			command_message: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			other_message: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
		properties
			CASE_Properties::Component_Type => COMM_DRIVER;
			CASE_Properties::Trust_Level => 100; CASE_Properties::Control_Level => 0;
	end RadioDriver;

	thread implementation RadioDriver.Impl
		properties
			Dispatch_Protocol => Periodic;
	end RadioDriver.Impl;

	thread Component_A
		features
			recv_command: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			status: out event data port Base_types::Boolean;
		properties
			CASE_Properties::Trust_Level => 0; CASE_Properties::Control_Level => 0;
		annex agree {**
			guarantee "Component status shall never be false" : status;
		**};
	end Component_A;

	thread implementation Component_A.Impl
		properties
			Dispatch_Protocol => Sporadic;
	end Component_A.Impl;
	
	thread Component_B
		features
			recv_message: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
		properties
			CASE_Properties::Trust_Level => 100; CASE_Properties::Control_Level => 0;
	end Component_B;

	thread implementation Component_B.Impl
		properties
			Dispatch_Protocol => Sporadic;
	end Component_B.Impl;

	process SW
		features
			input: in event data port;
			output: out event data port Base_Types::Boolean;
		properties
			CASE_Properties::Trust_Level => 0; CASE_Properties::Control_Level => 100;
		annex agree {**
			guarantee "Output status shall never be false" : output;
		**};
	end SW;

	process implementation SW.Impl
		subcomponents
			RADIO: thread RadioDriver.Impl;
			COMP_A: thread Component_A.Impl;
			COMP_B: thread Component_B.Impl;
		connections
			c1: port input -> RADIO.recv_message {CASE_Properties::Trust_Level => 0; CASE_Properties::Control_Level => 0;};
			c2: port RADIO.command_message -> COMP_A.recv_command {CASE_Properties::Trust_Level => 0; CASE_Properties::Control_Level => 0;};
			c3: port RADIO.other_message -> COMP_B.recv_message {CASE_Properties::Trust_Level => 0; CASE_Properties::Control_Level => 0;};
			c4: port COMP_A.status -> output {CASE_Properties::Trust_Level => 0; CASE_Properties::Control_Level => 0;};
	end SW.Impl;
	
	system Sys
		features
			input: in event data port;
			output: out event data port Base_Types::Boolean;
		properties
			CASE_Properties::Trust_Level => 0; CASE_Properties::Control_Level => 100;
	end Sys;
	
	system implementation Sys.Impl
		subcomponents
			SW: process SW.Impl;
		connections
			c1: port input -> SW.input {CASE_Properties::Trust_Level => 0; CASE_Properties::Control_Level => 0;};
			c2: port SW.output -> output {CASE_Properties::Trust_Level => 0; CASE_Properties::Control_Level => 0;};
	end Sys.Impl;
	
end Monitor;