package Attestation
public
	with CASE_Model_Transformations;

	with CASE_Properties;

	with Base_Types;

	thread CASE_AttestationManager
		features
			am_command_message_in: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			am_command_message_out: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			am_other_message_in: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			am_other_message_out: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			am_request: out event data port CASE_Model_Transformations::CASE_AttestationRequestMsg.Impl;
			am_response: in event data port CASE_Model_Transformations::CASE_AttestationResponseMsg.Impl;
		properties
			CASE_Properties::COMP_TYPE => ATTESTATION;
			CASE_Properties::COMP_SPEC => ("Req_Trusted_Attestation");
		annex agree {**
			guarantee Req_Trusted_Attestation "Only messages from trusted sources shall be permitted" : am_command_message_out.header.trusted;
		**};
	end CASE_AttestationManager;

	thread implementation CASE_AttestationManager.Impl
		properties
			CASE_Properties::CACHE_TIMEOUT => 30;
			CASE_Properties::CACHE_SIZE => 4;
			Dispatch_Protocol => Sporadic;
	end CASE_AttestationManager.Impl;

	thread RadioDriver
		features
			recv_message: in event data port;
			command_message: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			other_message: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
		properties
			CASE_Properties::COMP_TYPE => COMM_DRIVER;
	end RadioDriver;

	thread implementation RadioDriver.Impl
		properties
			Dispatch_Protocol => Periodic;
	end RadioDriver.Impl;

	thread Critical_A
		features
			recv_command: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			status: out event data port Base_types::Boolean;
		annex agree {**
			assume Req_Trusted "Command messages shall only come from trusted sources" : recv_command.header.trusted;
			guarantee "Critical component status shall never be false" : status;
		**};
	end Critical_A;

	thread implementation Critical_A.Impl
		properties
			Dispatch_Protocol => Sporadic;
	end Critical_A.Impl;

	thread Critical_B
		features
			recv_message: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
	end Critical_B;

	thread implementation Critical_B.Impl
		properties
			Dispatch_Protocol => Sporadic;
	end Critical_B.Impl;

	thread RadioDriver_Attestation extends RadioDriver
		features
			am_request: in event data port CASE_Model_Transformations::CASE_AttestationRequestMsg.Impl;
			am_response: out event data port CASE_Model_Transformations::CASE_AttestationResponseMsg.Impl;
			comm_request: out event data port CASE_Model_Transformations::CASE_AttestationRequestMsg.Impl;
			comm_response: in event data port CASE_Model_Transformations::CASE_AttestationResponseMsg.Impl;
	end RadioDriver_Attestation;

	thread implementation RadioDriver_Attestation.Impl extends RadioDriver.Impl
	end RadioDriver_Attestation.Impl;

	process SW
		features
			input: in event data port;
			output: out event data port Base_Types::Boolean;
		annex agree {**
			guarantee "Output status shall never be false" : output;
		**};
	end SW;

	process implementation SW.Impl
		subcomponents
			RADIO: thread RadioDriver_Attestation.Impl;
			CRIT_A: thread Critical_A.Impl;
			CRIT_B: thread Critical_B.Impl;
			AM: thread CASE_AttestationManager.Impl;
		connections
			c1: port input -> RADIO.recv_message;
			c5: port RADIO.command_message -> AM.am_command_message_in;
			c6: port RADIO.other_message -> AM.am_other_message_in;
			c7: port AM.am_request -> RADIO.am_request;
			c8: port RADIO.am_response -> AM.am_response;
			c2: port AM.am_command_message_out -> CRIT_A.recv_command;
			c3: port AM.am_other_message_out -> CRIT_B.recv_message;
			c4: port CRIT_A.status -> output;
		annex resolute {**
			prove Req_Trusted(this.CRIT_A, "Req_Trusted", this.RADIO, this.AM)
		**};
	end SW.Impl;

	system Sys
		features
			input: in event data port;
			output: out event data port Base_Types::Boolean;
	end Sys;

	system implementation Sys.Impl
		subcomponents
			SW: process SW.Impl;
		connections
			c1: port input -> SW.input;
			c2: port SW.output -> output;
	end Sys.Impl;
	
end Attestation;