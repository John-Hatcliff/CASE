package SW_EVENT
public
	with CASE_Properties;
	with CASE_Model_Transformations;
	with SW;

	thread RadioDriver
		-- The RadioDriver is the software that enables other SW components to communicate to other systems over RF
		features
			recv_data: in data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			send_data: out data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			mission_command: out event data port SW::RF_Msg.Impl;
			status: in data port SW::Coordinate.Impl;
		properties
			CASE_Properties::COMP_TYPE => COMM_DRIVER;
		annex agree {**
		        -- Output event is unconstrained as input ports are not event based...
		        guarantee Req02_RadioDriver "Only valid command messages shall be forwarded to message destination components" : 
		          event(mission_command) => SW::VALID_MESSAGE(mission_command);
		**};
	end RadioDriver;

	thread implementation RadioDriver.Impl
	end RadioDriver.Impl;

    thread CASE_Filter
        features
            filter_in: in event data port SW::RF_Msg.Impl;
            filter_out: out event data port SW::RF_Msg.Impl;
        properties
            CASE_Properties::COMP_TYPE => FILTER;
            CASE_Properties::COMP_IMPL => "";
            CASE_Properties::COMP_SPEC => "T";
        annex agree {**
                guarantee Req01_CASE_Filter "Only fire output event when input is a valid message": 
                    event(filter_out) <=> (event(filter_in) and SW::VALID_MESSAGE(filter_in));
                guarantee Req02_CASE_Filter "Only fire output event when input is a well-formed message": 
                    event(filter_out) <=> (event(filter_in) and SW::WELL_FORMED_MESSAGE(filter_in));
                guarantee Req03_CASE_Filter "Output should equal input when output event fires" : event(filter_out) => (filter_out = filter_in);
        **};
    end CASE_Filter;

    thread implementation CASE_Filter.Impl
    end CASE_Filter.Impl;
    
	thread FlightPlanner
		features
			flight_plan: out data port SW::Mission;
			recv_map: in event data port SW::RF_Msg.Impl;
			request_nofly_zones: out data port SW::Map;
			nofly_zones: in data port SW::MapArray;
			position_status: in data port SW::Coordinate.Impl;
		annex agree {**
		        assume Req01_FlightPlanner "The Flight Planner shall receive a valid message from the Ground Station" : 
		          event(recv_map) => SW::VALID_MESSAGE(recv_map);
		        assume Req02_FlightPlanner "The Flight Planner shall receiev a well-formed message from the Ground Station": 
		          event(recv_map) => SW::WELL_FORMED_MESSAGE(recv_map);
			    guarantee Req03_FlightPlanner "The Flight Planner shall generate a valid mission" : SW::good_mission(flight_plan);
	    **};
	end FlightPlanner;

	thread implementation FlightPlanner.Impl
	end FlightPlanner.Impl;

	process SW
		-- The Mission Computer Software process runs all threads
		features
			radio_recv: in data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			radio_send: out data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			uart_recv: in data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
			uart_send: out data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
			wifi_recv: in data port CASE_Model_Transformations::CASE_WIFI_Msg.Impl;
			wifi_send: out data port CASE_Model_Transformations::CASE_WIFI_Msg.Impl;
		annex agree {**
			guarantee Req01_SW "The Mission Computer shall output a valid mission window to the Flight Controller" : uart_send.crc;
		**};
	end SW;

    process implementation SW.Impl
        subcomponents
            RADIO: thread RadioDriver.Impl;
            FLT: thread CASE_Filter.Impl;
            FPLN: thread FlightPlanner.Impl;
            WPM: thread SW::WaypointManager.Impl;
            CM: thread SW::CameraManager.Impl;
            UART: thread SW::UARTDriver.Impl;
            WIFI: thread SW::WifiDriver.Impl;
            NFDB: thread SW::NoFlyZoneDatabase.Impl;
        connections
            c1: port radio_recv -> RADIO.recv_data;
            c2: port RADIO.send_data -> radio_send;
            c3: port RADIO.mission_command -> FLT.filter_in;
            c4: port FLT.filter_out -> FPLN.recv_map;
            c5: port FPLN.flight_plan -> WPM.flight_plan;
            c6: port FPLN.request_nofly_zones -> NFDB.map;
            c7: port NFDB.zones -> FPLN.nofly_zones;
            c8: port WPM.mission_window -> UART.mission_window;
            c9: port UART.status -> WPM.position_status;
            c10: port UART.status -> FPLN.position_status;
            c11: port UART.status -> RADIO.status;
            c12: port UART.send_data -> uart_send;
            c13: port uart_recv -> UART.recv_data;
            c14: port FPLN.flight_plan -> CM.flight_plan;
            c15: port UART.status -> CM.position_status;
            c16: port CM.gimbal_command -> WIFI.gimbal_command;
            c17: port WIFI.send_data -> wifi_send;
            c18: port wifi_recv -> WIFI.recv_data;
    end SW.Impl;
    
end SW_EVENT;