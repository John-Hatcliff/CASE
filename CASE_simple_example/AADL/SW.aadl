package SW
public
	
with Data_Model;
with Base_Types;

	data Waypoint
	end Waypoint;
	
	data implementation Waypoint.Impl
		subcomponents
			lat : data Base_Types::Float;
			long : data Base_Types::Float;
			alt : data Base_Types::Integer;
	end Waypoint.Impl;
	
	data Map
	end Map;
	
	data implementation Map.Impl
		subcomponents
			wp1 : data Waypoint.Impl;
			wp2 : data Waypoint.Impl;
			wp3 : data Waypoint.Impl;
			wp4 : data Waypoint.Impl;
	end Map.Impl;
	
	data FlightPattern
		properties		
			Data_Model::Data_Representation => Enum;
			Data_Model::Enumerators => ("Zigzag", "StraightLine", "Perimeter");
	end FlightPattern;
	
	data Command
	end Command;
	
	data implementation Command.Impl
		subcomponents
			Map : data Map.Impl;
			Pattern: data FlightPattern;
			HMAC: data Base_Types::Boolean;
	end Command.Impl;
	
	data Mission
	end Mission;
	
	data implementation Mission.Impl
		subcomponents
			wp1 : data Waypoint.Impl;
			wp2 : data Waypoint.Impl;
			wp3 : data Waypoint.Impl;
			wp4 : data Waypoint.Impl;
			wp5 : data Waypoint.Impl;
			wp6 : data Waypoint.Impl;
			wp7 : data Waypoint.Impl;
			wp8 : data Waypoint.Impl;
			wp9 : data Waypoint.Impl;
			wp10 : data Waypoint.Impl;
	end Mission.Impl;
	
	data MissionWindow
	end MissionWindow;
	
	data implementation MissionWindow.Impl
		subcomponents
			wp1 : data Waypoint.Impl;
			wp2 : data Waypoint.Impl;
			wp3 : data Waypoint.Impl;
			wp4 : data Waypoint.Impl;
			crc : data Base_Types::Boolean;
	end MissionWindow.Impl;
	
	thread FlightPlanner
		features
			recv_map: in event data port Command.Impl;
			flight_plan: out data port Mission.Impl;
			position_status: in event data port Waypoint.Impl;
			
		annex agree {**
			
			property well_formed_command =
				recv_map.Map.wp1.lat >= -90.0 and recv_map.Map.wp1.lat <= 90.0 and
				recv_map.Map.wp1.long >= -180.0 and recv_map.Map.wp1.long <= 180.0 and
				recv_map.Map.wp1.alt >= 0 and recv_map.Map.wp1.alt <= 15000 and
				recv_map.Map.wp2.lat >= -90.0 and recv_map.Map.wp2.lat <= 90.0 and
				recv_map.Map.wp2.long >= -180.0 and recv_map.Map.wp2.long <= 180.0 and
				recv_map.Map.wp2.alt >= 0 and recv_map.Map.wp2.alt <= 15000 and
				recv_map.Map.wp3.lat >= -90.0 and recv_map.Map.wp3.lat <= 90.0 and
				recv_map.Map.wp3.long >= -180.0 and recv_map.Map.wp3.long <= 180.0 and
				recv_map.Map.wp3.alt >= 0 and recv_map.Map.wp3.alt <= 15000 and
				recv_map.Map.wp4.lat >= -90.0 and recv_map.Map.wp4.lat <= 90.0 and
				recv_map.Map.wp4.long >= -180.0 and recv_map.Map.wp4.long <= 180.0 and
				recv_map.Map.wp4.alt >= 0 and recv_map.Map.wp4.alt <= 15000 and
				(	recv_map.Pattern = Enum(SW::FlightPattern, ZigZag) or 
					recv_map.Pattern = Enum(SW::FlightPattern, StraightLine) or 
					recv_map.Pattern = Enum(SW::FlightPattern, Perimeter)
				);
			
			assume "Authenticated command from the Ground Station" : recv_map.HMAC = True;
--			assume "Well-formed command from the Ground Station" : well_formed_command;

			guarantee "The Flight Planner shall generate a valid mission if it receives an authenticated command from the Ground Station" : 
--			guarantee "The Flight Planner shall generate a valid mission if it receives an authenticated AND well-formed command from the Ground Station" : 
				flight_plan.wp1.lat >= -90.0 and flight_plan.wp1.lat <= 90.0 and
				flight_plan.wp1.long >= -180.0 and flight_plan.wp1.long <= 180.0 and
				flight_plan.wp1.alt >= 0 and flight_plan.wp1.alt <= 15000 and
				flight_plan.wp2.lat >= -90.0 and flight_plan.wp2.lat <= 90.0 and
				flight_plan.wp2.long >= -180.0 and flight_plan.wp2.long <= 180.0 and
				flight_plan.wp2.alt >= 0 and flight_plan.wp2.alt <= 15000 and
				flight_plan.wp3.lat >= -90.0 and flight_plan.wp3.lat <= 90.0 and
				flight_plan.wp3.long >= -180.0 and flight_plan.wp3.long <= 180.0 and
				flight_plan.wp3.alt >= 0 and flight_plan.wp3.alt <= 15000 and
				flight_plan.wp4.lat >= -90.0 and flight_plan.wp4.lat <= 90.0 and
				flight_plan.wp4.long >= -180.0 and flight_plan.wp4.long <= 180.0 and
				flight_plan.wp4.alt >= 0 and flight_plan.wp4.alt <= 15000 and
				flight_plan.wp5.lat >= -90.0 and flight_plan.wp5.lat <= 90.0 and
				flight_plan.wp5.long >= -180.0 and flight_plan.wp5.long <= 180.0 and
				flight_plan.wp5.alt >= 0 and flight_plan.wp5.alt <= 15000 and
				flight_plan.wp6.lat >= -90.0 and flight_plan.wp6.lat <= 90.0 and
				flight_plan.wp6.long >= -180.0 and flight_plan.wp6.long <= 180.0 and
				flight_plan.wp6.alt >= 0 and flight_plan.wp6.alt <= 15000 and
				flight_plan.wp7.lat >= -90.0 and flight_plan.wp7.lat <= 90.0 and
				flight_plan.wp7.long >= -180.0 and flight_plan.wp7.long <= 180.0 and
				flight_plan.wp7.alt >= 0 and flight_plan.wp7.alt <= 15000 and
				flight_plan.wp8.lat >= -90.0 and flight_plan.wp8.lat <= 90.0 and
				flight_plan.wp8.long >= -180.0 and flight_plan.wp8.long <= 180.0 and
				flight_plan.wp8.alt >= 0 and flight_plan.wp8.alt <= 15000 and
				flight_plan.wp9.lat >= -90.0 and flight_plan.wp9.lat <= 90.0 and
				flight_plan.wp9.long >= -180.0 and flight_plan.wp9.long <= 180.0 and
				flight_plan.wp9.alt >= 0 and flight_plan.wp9.alt <= 15000 and
				flight_plan.wp10.lat >= -90.0 and flight_plan.wp10.lat <= 90.0 and
				flight_plan.wp10.long >= -180.0 and flight_plan.wp10.long <= 180.0 and
				flight_plan.wp10.alt >= 0 and flight_plan.wp10.alt <= 15000;
				
		**};
			
	end FlightPlanner;

	thread RadioDriver
		features
			recv_map_in: in event data port Command.Impl;
			send_status_out: out event data port Waypoint.Impl;
			send_status_in: in event data port Waypoint.Impl;
			recv_map_out: out event data port Command.Impl;
			
		annex agree {**
			-- we abstract away the authentication and just provide the guarantee for now
			--assume "Authenticated command from the Ground Station" : recv_map_in.HMAC = True;
			guarantee "Authenticated command from the Ground Station" : recv_map_out.HMAC = True;
		**};
			
	end RadioDriver;

	thread WaypointManager
		features
			flight_plan: in data port Mission.Impl;
			waypoint: out event data port MissionWindow.Impl;
			position_status: in event data port Waypoint.Impl;
			
		annex agree {**
			
			assume "Well-formed mission" : 
				flight_plan.wp1.lat >= -90.0 and flight_plan.wp1.lat <= 90.0 and
				flight_plan.wp1.long >= -180.0 and flight_plan.wp1.long <= 180.0 and
				flight_plan.wp1.alt >= 0 and flight_plan.wp1.alt <= 15000 and
				flight_plan.wp2.lat >= -90.0 and flight_plan.wp2.lat <= 90.0 and
				flight_plan.wp2.long >= -180.0 and flight_plan.wp2.long <= 180.0 and
				flight_plan.wp2.alt >= 0 and flight_plan.wp2.alt <= 15000 and
				flight_plan.wp3.lat >= -90.0 and flight_plan.wp3.lat <= 90.0 and
				flight_plan.wp3.long >= -180.0 and flight_plan.wp3.long <= 180.0 and
				flight_plan.wp3.alt >= 0 and flight_plan.wp3.alt <= 15000 and
				flight_plan.wp4.lat >= -90.0 and flight_plan.wp4.lat <= 90.0 and
				flight_plan.wp4.long >= -180.0 and flight_plan.wp4.long <= 180.0 and
				flight_plan.wp4.alt >= 0 and flight_plan.wp4.alt <= 15000 and
				flight_plan.wp5.lat >= -90.0 and flight_plan.wp5.lat <= 90.0 and
				flight_plan.wp5.long >= -180.0 and flight_plan.wp5.long <= 180.0 and
				flight_plan.wp5.alt >= 0 and flight_plan.wp5.alt <= 15000 and
				flight_plan.wp6.lat >= -90.0 and flight_plan.wp6.lat <= 90.0 and
				flight_plan.wp6.long >= -180.0 and flight_plan.wp6.long <= 180.0 and
				flight_plan.wp6.alt >= 0 and flight_plan.wp6.alt <= 15000 and
				flight_plan.wp7.lat >= -90.0 and flight_plan.wp7.lat <= 90.0 and
				flight_plan.wp7.long >= -180.0 and flight_plan.wp7.long <= 180.0 and
				flight_plan.wp7.alt >= 0 and flight_plan.wp7.alt <= 15000 and
				flight_plan.wp8.lat >= -90.0 and flight_plan.wp8.lat <= 90.0 and
				flight_plan.wp8.long >= -180.0 and flight_plan.wp8.long <= 180.0 and
				flight_plan.wp8.alt >= 0 and flight_plan.wp8.alt <= 15000 and
				flight_plan.wp9.lat >= -90.0 and flight_plan.wp9.lat <= 90.0 and
				flight_plan.wp9.long >= -180.0 and flight_plan.wp9.long <= 180.0 and
				flight_plan.wp9.alt >= 0 and flight_plan.wp9.alt <= 15000 and
				flight_plan.wp10.lat >= -90.0 and flight_plan.wp10.lat <= 90.0 and
				flight_plan.wp10.long >= -180.0 and flight_plan.wp10.long <= 180.0 and
				flight_plan.wp10.alt >= 0 and flight_plan.wp10.alt <= 15000;
			guarantee "The Waypoint Manager shall always output a well-formed mission window." : 
				waypoint.wp1.lat >= -90.0 and waypoint.wp1.lat <= 90.0 and
				waypoint.wp1.long >= -180.0 and waypoint.wp1.long <= 180.0 and
				waypoint.wp1.alt >= 0 and waypoint.wp1.alt <= 15000 and
				waypoint.wp2.lat >= -90.0 and waypoint.wp2.lat <= 90.0 and
				waypoint.wp2.long >= -180.0 and waypoint.wp2.long <= 180.0 and
				waypoint.wp2.alt >= 0 and waypoint.wp2.alt <= 15000 and
				waypoint.wp3.lat >= -90.0 and waypoint.wp3.lat <= 90.0 and
				waypoint.wp3.long >= -180.0 and waypoint.wp3.long <= 180.0 and
				waypoint.wp3.alt >= 0 and waypoint.wp3.alt <= 15000 and
				waypoint.wp4.lat >= -90.0 and waypoint.wp4.lat <= 90.0 and
				waypoint.wp4.long >= -180.0 and waypoint.wp4.long <= 180.0 and
				waypoint.wp4.alt >= 0 and waypoint.wp4.alt <= 15000;
		
		**};
			
	end WaypointManager;
	
	thread UARTDriver
		features
			position_status_in: in event data port Waypoint.Impl;
			waypoint_out: out event data port MissionWindow.Impl;
			position_status_out: out event data port Waypoint.Impl;
			waypoint_in: in event data port MissionWindow.Impl;
			
		annex agree {**
			assume "Well-formed mission window" : 
				waypoint_in.wp1.lat >= -90.0 and waypoint_in.wp1.lat <= 90.0 and
				waypoint_in.wp1.long >= -180.0 and waypoint_in.wp1.long <= 180.0 and
				waypoint_in.wp1.alt >= 0 and waypoint_in.wp1.alt <= 15000 and
				waypoint_in.wp2.lat >= -90.0 and waypoint_in.wp2.lat <= 90.0 and
				waypoint_in.wp2.long >= -180.0 and waypoint_in.wp2.long <= 180.0 and
				waypoint_in.wp2.alt >= 0 and waypoint_in.wp2.alt <= 15000 and
				waypoint_in.wp3.lat >= -90.0 and waypoint_in.wp3.lat <= 90.0 and
				waypoint_in.wp3.long >= -180.0 and waypoint_in.wp3.long <= 180.0 and
				waypoint_in.wp3.alt >= 0 and waypoint_in.wp3.alt <= 15000 and
				waypoint_in.wp4.lat >= -90.0 and waypoint_in.wp4.lat <= 90.0 and
				waypoint_in.wp4.long >= -180.0 and waypoint_in.wp4.long <= 180.0 and
				waypoint_in.wp4.alt >= 0 and waypoint_in.wp4.alt <= 15000;
			guarantee "A CRC shall be appended to the message to determine message correctness" : waypoint_out.crc = True;
		**};
			
	end UARTDriver;

	process MC_SW
		features
			recv_map: in event data port Command.Impl;
			send_status: out event data port Waypoint.Impl;
			waypoint: out event data port MissionWindow.Impl;
			position_status: in event data port Waypoint.Impl;
			
		annex agree {**
			-- we abstract away the authentication and just assume the message has undergone authenticity verification
			assume "Authenticated command from the Ground Station" : recv_map.HMAC = True;
			guarantee "The Software shall output a valid mission window to the Flight Controller" : waypoint.crc = True;
		**};
			
	end MC_SW;

	process implementation MC_SW.Impl
		subcomponents
			RADIO: thread RadioDriver;
			FPLN: thread FlightPlanner;
			WPM: thread WaypointManager;
			UART: thread UARTDriver;
		connections
			c1: port recv_map -> RADIO.recv_map_in;
			c2: port RADIO.send_status_out -> send_status;
			c3: port RADIO.recv_map_out -> FPLN.recv_map;
			c4: port FPLN.flight_plan -> WPM.flight_plan;
			c5: port WPM.waypoint -> UART.waypoint_in;
			c6: port UART.position_status_out -> WPM.position_status;
			c7: port UART.position_status_out -> FPLN.position_status;
			c8: port UART.position_status_out -> RADIO.send_status_in;
			c9: port UART.waypoint_out -> waypoint;
			c10: port position_status -> UART.position_status_in;
			
	end MC_SW.Impl;	
	
end SW;