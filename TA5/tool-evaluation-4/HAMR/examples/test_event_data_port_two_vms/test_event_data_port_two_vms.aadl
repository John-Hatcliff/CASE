----------------------------------------------------------------------
-- Copyright 2020 DARPA CASE
--
-- Micro example AADL to show single AADL dataport communications for
-- a periodic process running under the seL4 domain scheduler
----------------------------------------------------------------------
package test_event_data_port_two_vms
public
	with HAMR;
	with Base_Types;
	with seL4_Properties;

	thread producer_t
		features
			write_port: out data port Base_Types::Integer_8;
		properties
			Dispatch_Protocol => Periodic;
			Period => 1000ms;
			Compute_Execution_Time => 10ms .. 10ms;
			Source_Text => ("behavior_code/vm/app/sender/sender.c");
	end producer_t;

	thread implementation producer_t.impl
	end producer_t.impl;
	
	process producer_p
		features 
			write_port : out data port Base_Types::Integer_8;
	end producer_p;
	
    -- process specifies boundary of spatial isolation
	process implementation producer_p.impl
		subcomponents
			src_thread : thread producer_t.impl;
		connections
			write_connection : port src_thread.write_port -> write_port;
		properties
			seL4_Properties::Domain => 2; -- pacer 1, source 2, destination 3
	end producer_p.impl;

	thread consumer_t
		features
			read_port: in data port Base_Types::Integer_8;
		properties
			Dispatch_Protocol => Periodic;
			Period => 1000ms;
			Compute_Execution_Time => 10ms .. 10ms;
			Source_Text => ("behavior_code/vm/app/receiver/receiver.c");
	end consumer_t;

	thread implementation consumer_t.impl
	end consumer_t.impl;
	
	process consumer_p
		features
			read_port : in data port Base_Types::Integer_8;
	end consumer_p;
	
    -- process specifies boundary of spatial isolation
	process implementation consumer_p.impl
		subcomponents
			dst_thread : thread consumer_t.impl;
		connections
			read_connection : port read_port -> dst_thread.read_port;
		properties
			seL4_Properties::Domain => 3; -- pacer 1, source 2, destination 3
	end consumer_p.impl;

	processor proc
	end proc;

	processor implementation proc.impl
		properties
			Frame_Period => 1000ms;
            Clock_Period => 2ms;
			seL4_Properties::Schedule_Source_Text => "behavior_code/kernel/domain_schedule.c";
			seL4_Properties::OS => CAmkES;
	end proc.impl;
	
	virtual processor vproc_sender
	end vproc_sender;
	
	virtual processor vproc_receiver
	end vproc_receiver;
	
	virtual processor implementation vproc_sender.impl
		properties
			seL4_Properties::OS => Linux;
			seL4_Properties::Source_Binary => "projects/camkes-vm-images/exynos5422/linux";
			seL4_Properties::Source_Filesystem_Binary => "projects/camkes-vm-images/exynos5422/root_fs_crossvm.cpio.gz";
	end vproc_sender.impl;

	virtual processor implementation vproc_receiver.impl
		properties
			seL4_Properties::OS => Linux;
			seL4_Properties::Source_Binary => "projects/camkes-vm-images/exynos5422/linux";
			seL4_Properties::Source_Filesystem_Binary => "projects/camkes-vm-images/exynos5422/root_fs_crossvm.cpio.gz";
	end vproc_receiver.impl;

	system top
	end top;

	system implementation top.impl
		subcomponents
			proc : processor proc.impl;
			vproc_sender : virtual processor vproc_sender.impl;
			vproc_receiver : virtual processor vproc_receiver.impl;
			src_process : process producer_p.impl;
			dst_process : process consumer_p.impl;
		connections
			data_interconnect: port src_process.write_port -> dst_process.read_port;
		properties
			Actual_Processor_Binding => (reference (proc)) applies to vproc_sender;
			Actual_Processor_Binding => (reference (proc)) applies to vproc_receiver;
			Actual_Processor_Binding => (reference (vproc_sender)) applies to src_process;
			Actual_Processor_Binding => (reference (vproc_receiver)) applies to dst_process;
			HAMR::Platform => (seL4_TB, seL4_Only);
		annex resolute {**
			check CASE_Tools
		**};
	end top.impl;

end test_event_data_port_two_vms;
